// Geometry Function Lab
// Part 1, Rectangle

// Given the following a rectangle object like the one below, write the following functions:

// isSquare - Returns whether the rectangle is a square or not











var rectangle = {
	length: 4,
	width: 4
};

var badRectangle = {
	length: 5,
	width: 4
};

var area = function (shape) {
	
		return shape.length * shape.width;
}

console.log("We passed in: ", rectangle, ". the area should be 16" , area (rectangle));
console.log("We passed in: ", badRectangle, ". the area should be 20", area(badRectangle));











var isSSquare = function (shape) {
	if(shape.length === shape.width) {
		return true;
	}else { 
		return false;
	}
	};

// console.log("We passed in: ", rectangle, ".  It should be true!", isSquare(rectangle)); 
// console.log("We passed in: ", badRectangle, ".  It should be false!", isSquare(badRectangle))

// area returns the area of the rectangle
// 0 . what type of data, we need a function that works with an object
// 1. inside functino i need to mutiply legnth by width
// 2. return the area 


// area - Returns the area of the rectangle

var area = function (shape) {

		return shape.length * shape.width;
}

console.log("We passed in: ", rectangle, ". the area should be 16" , area (rectangle));
console.log("We passed in: ", badRectangle, ". the area should be 20", area(badRectangle));


// perimeter - Returns the perimeter of the rectangle

// Perimeter - returns the perimeter of the rectangle
//0. what type of data? - we need a funciton that works with an object
// 1. inside funciton I need to work out the perimeter of rectangle
	//add the width x 2 and the height x 2
	//2. return perimeter

	var perimeter = function (shape) {
		return (shape.length * 2) + (shape.width * 2);	
	};


console.log("We passed in: ", rectangle, ". the 	perimeter should be 16" , perimeter(rectangle));
console.log("We passed in: ", badRectangle, ". the perimeter should be 20", perimeter(badRectangle));



// Part 2, Triangle

// Given the following a triangle object like the one below, write the following functions:

// isEquilateral - Returns whether the triangle is equilateral or not

var triangle = {
  sideA: 3,
  sideB: 4,
  sideC: 4
};

var isEquilateral = function(shape)     // returns whether it is an isoceles or not 

if (shape.sideA == shape.sideB && shape.sideB == shape.sideC ) {
	return true :
} else { 
return false}

}
};

console.log("We passed in: ", triangle, ".  It should be false!", isEquilateral(triangle)); 



// isIsosceles - Returns whether the triangle is isosceles or not

// find out if two sides, and only 2 sides are equal 
//  return true or false 


a = c
b = c
a = b 



var isIsoceles = function(shape)     // returns whether it is an isoceles or not 



// if  (!isEquilateral(shape) && (shape.sideA===shape.sideB || shape.sideA===shape.sideC || shape.sideB===shape.sideC)) {
// 	return ture;
// }
// return false;
// } ;







if (shape.sideA == shape.sideB && shape.sideB !== shape.sideC ) {
	return true :
} else {  
	(shape.sideA == shape.sideC && shape.sideB !== shape.sideC )
} else { 
	(shape.sideB== shape.sideC && shape.sideB !== shape.sideA )
} else {return false}

}
};


// Area oF TRIAngle 

var triangle = {
  sideA: 3,
  sideB: 4,
  sideC: 4
};



var tri = {
  sideA: 3,
  sideB: 4,
  sideC: 2
};

var tritri = {
  sideA: 30,
  sideB: 20,
  sideC: 20
};

	var triArea = function(shape) {




 	var s = ((shape.sideA + shape.sideB + shape.sideC)/ 2 ); 



return Math.sqrt((s - shape.sideA) * (s - shape.sideB) * (s - shape.sideC)) 

}

console.log(triArea(triangle))
console.log(triArea(tritri)) 
console.log(triArea(tri)) 




// console.log("We passed in: ", triangle, ".  It should be false!", isIsoceles(triangle)); 







// isObtuse - Returns whether the triangle is obtuse or not
// var triangle = {
//   sideA: 3,
//   sideB: 4,
//   sideC: 4
// };
// /


// isObtuse



var isObtuse = function (shape) {



    var angleA = Math.acos( ( ( shape.sideB * shape.sideB ) + ( shape.sideC * shape.sideC ) - ( shape.sideA * shape.sideA ) ) / 2 * shape.sideB * shape.sideC );

    var angleB = Math.acos( ( ( shape.sideA * shape.sideA ) + ( shape.sideC * shape.sideC ) - ( shape.sideB * shape.sideB ) ) / 2 * shape.sideA * shape.sideC );

    var angleC = 180 - angleA - angleB;
    

    if (angleA > 90) {
        return "angleA is obtuse";
    }
    else if (angleB > 90) {
        return "angleB is obtuse";
    }
    else if (angleC > 90) {
        return "angleC is obtuse";
    }
    else {
        return "This is not an obtuse triangle!";
    }

}; 

console.log("We passed in: ", triangle, ". ", isObtuse(triangle));




// // JavaScript Bank
// In this homework, you'll create a basic bank in Javascript. The bank has many accounts and the following capabilities that you need to write.

// Bank

// There is only one bank. This bank has an array of accounts. The bank needs a method that will return the total sum of money in the accounts. It also needs an addAccount method that will enroll a new account at the bank and add it to the array of accounts. There is no need to create additional functions of the bank to delete accounts, etc.

// The bank has many accounts. Accounts should be objects that all share a set of common functionality.

// Accounts

// Accounts have a current balance and owner's name. You should be able to deposit or withdraw from an account to change the balance.

// There is no need to write a user interface. Make sure functions return values -- you may also have your functions console.log() values to help you see your code working.

// You should write a basic story through a series of JavaScript commands that shows that the methods do indeed work as expected: add some accounts, show the total balance,
 // make some deposits and withdrawals, show the new total balance.

// Tips

// Don't overthink this. Shorter code is probably the answer.

// Bonus

// Ensure that the accounts cannot have negative values.
// Write a 'transfer' on the bank that allows you to transfer amounts between two accounts.
// Additional

// Begin exploring the JavaScript Koans. Fork, clone and start trying them.

// we know there is one bank and many accounts
// we will need a method that returns total sum of all acocount balances
// we also need a method to add new accounts to the bank
//  accounts need name and balance 
// we need a function to change account balances in each invdividual accounts 
//   Comment on code to show our workings and how it works 



var bank = [
    {     accountName: "Daniel",
        balance: 1005    },
    {     accountName: "Adrian",
        balance: 1000     },
    {    accountName: "Vivian",
        balance: 2000    },
    {    accountName: "Gemma",
        balance: 1500    },
    {    accountName: "Vivienne",
        balance: 1300    }];
var sumArray = function(bank){
    var total = 0; 
     for (var i = 0; i <bank.length; i++){
    total += bank[i].balance;
     } 
     console.log(total);
}
sumArray(bank);


// we also need a method to add new accounts to the bank

var newAccount = function (nam, bal){
    bank.push({ accountName: nam, balance: bal });
    };
    
newAccount("Joe", 17);
newAccount("Ricky", 2000);


we need a function to change account balances in each invdividual accounts 


var depoistAmount = function (person, deposit)    // haven't got this working yet 
        var pos = bank.accountName.indexOf(person)
          var personBalance = bank(pos).balance
          var newBalance = personBalance + deposit


     var findPosition = bank(indexOf(person)).accountName
          bank.



// OR EACH ACCOUNT IS A SEPERATE OBJECT? ?   ( I can only use it to find the position of each person's name so far )

var Daniel = 
    {     accountName: "Daniel",
        balance: 1005    }; 
var Adrian = 
    {     accountName: "Adrian",
        balance: 1000     };
var Vivian = 
    {    accountName: "Vivian",
        balance: 2000    };
        
 var Gemma  = 
    {    accountName: "Gemma ",
        balance: 1500    };
 var Vivienne = 
    {    accountName: "Vivienne",
        balance: 1300    };
        
 
var myArray = [] ; 
myArray.push(Daniel, Adrian, Vivian, Gemma, Vivienne);

 
var findNewBalance = function(person, deposit) {
    pos = myArray.map(function(e) { return e.accountName;}).indexOf(person)
var currentBalance = bank(pos).balance; 
 var newBalance = currentBalance + deposit ;
{return newBalance ; }
};


