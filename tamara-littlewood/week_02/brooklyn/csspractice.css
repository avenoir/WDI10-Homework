/*   display   */

BLOCK 

header p, nav, header, footer

INLINE
links, images, span, etc

DISPLAY VALUES - heaps, see link
none (removes completely), block, inline

VISIBILITY
hidden (still space on page), none


EXAMPLES - width

margin: auto;

#main {
	width: 600px;
	margin: 0 auto;
}

setting width of block level element will prevent it from stretching out to the edges of its container

set the margin to 0 auto to center the elenent on the page

BUT USE - max width to improve browser handing of small windows

#main {
	max-width: 600px;
	margin: 0 auto;
}


BOX MODEL

content, padding, margin, border

.simple { /* smaller */
	width: 500px;
	margin: 20px auto;
}

.fancy { /* bigger */
	width: 500px;
	margin: 20px auto;
	padding: 50px;
}




BOX-SIZING

box-sizing : border-box

the padding and border od that element no longer increase its width.

Here is the same example but using box-sizing: border-box on both elements


.simple {
	width: 500px;
	margin: 200px auto;
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}


.fancy {
	width: 500px;
	margin: 20px auto;
	padding: 50px;
	border: solid blue 10px;
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

DIVS SAME SIZE NOW

USE it - box-sizng: border-box

* {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing; border-box;
}


Ensures all element are always sized in a more intuative way

Since box-sizing is pretty new, you should use the -webkit and -moz prefixes for now.






POSITION

In order to make moe complex layouts, we need to discuss the position property

It has a bunch of possible values, and their names make no sense and are impossible to remember. Lets go through them one by one

but maybe you should bookmark this page too



STATIC

.static {
	position: static;
}

static is the default value. An element with position: static; is not positioned in any special way. A static element is said to 
be NOT positioned.

and an element with its position set to anything else is said to be positioned


RELATIVE

.relative1 {
	position: relative;
}

relative2 {
	position: relative;
	top: -20px;
	left: 20px;
	background-color: white;
	width: 500px;
}


relatie is the same as static unless you want to add some extra properties

setting the top right bottom and left properties of a relatively positioned element will cause it to be adjusted awy from its normal position. Other content will not be adjusted to fit into any gap left by the element



FIXED

a fixed element is positioned relative to the viewport which means it always stays in the same place even if the page is scrolled. As with relative the top right bottom and left properties are used

Im sure youve noticed that fixed element in the lower right hand corder of the page.

I'm giving you permission to pay attention to it nowHere is the CSS that puts it there

.fixed {
	position: fixed;
	bottom: 0;
	right: 0;
	width: 200px;
	background-color; white;
}


A fixed element does not leave a gap in the page where it would normally have been located

Mobile browsers have surprisingly shaky support for fixed


ABSOLUTE

bsolute is the trickiest position value. absolute behaves like fixed except relative to the nearest positioned ancestor instead of relative to the view port. If an absolutely-positioned element has no positioned ancestors, it used the document body, nd still moves along withpage scrolling.
Remeber a "positioned" element is one whose position is ANYTHING EXCEPT STATIC

Here is a simple example

.relative {
	position: relative;
	width: 600px;
	height: 400px;
}
.absolute {
	position: absolute;
	top: 120px;
	right: 0;
	width: 300px;
	height: 200px;
}


DIV class relative is relatively positioned
DIV CLASS ABSOLUTE is absolutely positioned relative to its parent

this stuff is tricky, but its essential to creating great css ;ayouts



POSITION EXAMPLES
the position stuff might make a little more sense in a practical example. Below is a realistic page layouts
.container {
	position: relative;
}

nav {
	position: absolute;
	left: 9px;
	width: 200px;
}
section {
	/*position is static by default */
	margin-left: 200px;
}

footer {
	position: fixed;
	bottom: 0;
	left: 0;
	height: 70px;
	background-color: white;
	width: 100px;
}
footer {
	position: fixed;
	bottom: 0;
	left: 0;
	height: 70px;
	background-color: white;
	width: 100%;
}
body {
	margin-bottom: 120px;
}



NAV on the left with line layouts
SECTION top taking up  the rest of the space left to right
section 
section!!!

this example works because the container is taller than the nav. If it wasnt the nav would overflow outside of its container. In the coming pages well discuss other layour techniques that have different pros and cons.




FLOAT

Another CSS property used for layouts is FLOATfloat is intended for wrapping text around images like this:

img {
	float: right;
	margin: 0 0 iem 1em;
}

Lorem ipsum mother fucker

the gunuiea pig and the text all float and fill to the right


CLEAR

the clear property is important for controlling the behaviour of flaots. Compare these two EXAMPLES
<div class="box">...</div>
<section>..</section>

.box {
	float: left;
	width: 200px;
	height: 100px;
	margin: 1em;
}

section is running all the way from left to right with a small margin
the div feels like its floating


.box {
	float: left;
	width: 200px;
	height: 100px
	margim: 1em;
}
.after-box {
	clear-left;
}

the div still feeels like its FLOATING!!!
the div underneath is now clearing after the box



THE CLEARFIX HACK

here is a weird bad thing can somethimes happen when using floars

img {
	float: right;
}

the dive is taller than the element containing it, and its floated, so its overflowing outside of its container

the pig is a square floating right

Boo..

try adding the CSS



.clearfix {
	overflow: auto;
}

Now lets see what happens

div class= clearfix = much better the pig and the div box are th same sized

this works for mordern browsers. If you wan tot support IE you will want to add the following

clearfix {
	overflow: auto;
	zoom: 1;
}


there are 

USE text-indent: 


FLOAT LAYOUT EXAMPLE

its very common to do entire layouts using floats

Her is  the same layour we did with position earlier, but using float instead

nav {
	float: left;
	width: 200px;
}

section {
	margin-left: 200px;
}

NAV ON THE LEFT WITH SOME INLINE MENUS

Section top going left to right to fill the rest of the page-break-inside: 

This example works just like the las tone . Notive we pjt a clear fix on the container. Its not need in this example but it would be if the nav was  longer than the non-floated content: 





PERCENT width: 
Percent is a measurement usiit relative to the containing bloxk.

Its great for images here we make an image that is always 50% of the width of its container. Try shrinking down the page to see what happens!

article img {
	float: right;
	width: 50%;
}

the pig and the div are half half

article class="clearfix'>

you could even use min-width and ma-width to limit how big or small the image can great


PERCENT WIDTH LAZYOU

you can use percent for layout, but this can require more work. In this example, the nav content stat to wrap in a displeasing way when the window is too narrow.
It comes down to what works for your content: 
nav {
	float: left;
	width: 25%;
}
section {
	margin-left: 25%;
}


the layout has NAV and the inline menu on the left. section is going left to right for the remainder of the page.

section says

when this layout is too narrow, the nav gets squished. Worse, you want use min-width on the nav to fix because the right column wouldnt respect text-indent: 



mMEDIA QUERIES

"resposnive design is the strategy of makking a site that respons to the browser and device that it is being shown on... by looking aweome no atter what

Media queries are the most powerful tool for doing this. lets take our layout that used prcent widths and have it display in one column when the browser is too small to fit  the menu in the sidebar



@media screen and (min-width: 600px) {
	nav {
		float: left;
		width: 25%;
	}
	section {
		margin-left: 25%;
	}
}
@media screen and (max-width: 559px) {
	nav li {
		display: inline;
	}
}

naav id on the left with inline menu

section says
now when you resize your borwser its cooler than ever

section
Tada now our layout looks great even on mobiles

Here are some popular sites that use media queries that way..


there is a whole lot more you can detect other than min-width and max-width

Extra credit

make your layour even better on mobile using meta viewport





INLINE BLOCK

You can create a grid of boxes that fills the browser width and wraps nicely.
This has been possible for a long time using floatBut now with inline-block its even easier
inline block elements are like inline elements but they can have a width and height
Lets kook at examples of both approaches


THE HARD WAY (USING FLOAT)

.box {
	float: left;
	width: 200px;
	height: 100px;
	margin: 1em;
}
.after-box {
	clear:; left;
}



this results in mini div boxes class = "box" floating
div class="after-box" he is clear and underneath all the flaoting boxes




THE EASY WAY USING INLINE-BLOCK)

you can achieve the same effect using the inline-block value of the display property

.box2 {
	display: inlin-block;
	width: 200px;
	height: 100px;
	margin: 1em;
}


this results in div class="box2" also floating but they are inline blocks 


the div says i dont have to use clear in this case. nicely

you have to do something for ie8 andblah





INLINE-BLOCK table-layout: 
You can also use inline-block for layouts. There are a few thngns to keep in min-width: 
Inline-block elements are affected by the vertical-align property which you probably want toset to top: 
you need to set the width of each column
There will be a gap between the colummns if there is any whitespace between them in the HTML

nav {
	display: inline-block;
	vertical-align: top;
	width: 25%;
}
.column {
	display: inline-block;
	vertical-align: top;
	width: 75%;
}

this sets the nav to the left with the menu on the left
and the section says tada and goes all the way accross



COLUMN

there is a new set of CSS properties that let you easily make multi-column text.
Have a look

.three-column: 1em;
-moz-column-count: 3;
-moz-column-gap: 1em;
-webkit-column-count: 3;
-webkit-column-gap: 1em;
column-count: 3;
column-gap: 1em;;
}

div class="three-column">

is a three column newspaper style table-layout: 
the column is very new. you must use the prefixes or it wont work



FLEXBOX

The new flexbox layour mode is poised toredfine how we do laoyours in CSS
Unfortnately the specification has changed a lot recently so its implemented differently in different browers.. Still id like to share a couple examples so you know whats coming up. These examples are currently only work some browsers that use the latestversion of the standard

There are a lot of out-of-date flexbox resources around. If you want to learn more about flexbox, start her to learn how to identify if a resource is a current or not. I have written a detailed article about using the latest syntax.

Tjere is a lot more you can do with flexbox.
There are just a few examples to give you an idea


SIMPLE LAYOUT USING FLEXBOX

.container {
	display: -webkit-flex;
	display: flex;
}
nav {
	width: 200px;
}
.flex-column {
	-webkit-flex: 1;
	flex: 1;
}

nav and menu are on the left  section is on the right filling the rest of the page left to right: 



FANCY LAYOUT USING FLEXBOX


.container {
	display: -webkit-flex;
	display: flex;
}
.initial {
	-webkit-flex: intial;
	flex: initial;
	width: 200px;
	min-width: 100px;
}
.none {
	-webkit-flex: none;
	flex: none;
	width: 200px;
}
.flex1 {
	-webkit-flex: 1;
	flex: 1;
}
.flex2 {
	-webkit-flex: 2;
	flex: 2;
}

the div class=inital, none flex1 and flex2




CENTERED USING FLEXBOX;

.vertical container {
	height: 300px;
	display: -webkit-flex;
	display: flex;
	-webkit-align-items: center;
	align-items: center;
	-webkit-justify-constent: center;
	justify-content: center;
}



THIS GIVES A CLASSY


div class="vertical-container" and a centered div

finally its easy to vertically center something in CSS




CSS Fameworks

blueprint
unsemantic
bluetip
elasticss
bootstrap
gumby
susy
foundation
kube
groundworkCSS
semanticUI 
PureCSS